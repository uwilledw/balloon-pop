let fs = require("fs")
let { execSync } = require("child_process")
let { colors, startSpinner, stopSpinner } = require('../console-utils')
const { generateWorkspace } = require("./generateWorkspace")
const { npm_i } = require("./npm_i")

function createDotnetAuth(CURR_DIR, projectName) {
  return new Promise((resolve, reject) => {
    try {
      let projPath = `${CURR_DIR}/${projectName}`
      execSync(`npx create-project ${projectName} codeworks-templates/dotnet-webapi`)
      process.chdir(projPath)
      fs.renameSync(`${projPath}/{{name}}.csproj`, `${projPath}/${projectName}.csproj`)
      installServerDependencies()
      resolve(`[#] Open Project Workspace\n[#] cd into ${projectName}\n[#] type 'code ${projectName}.code-workspace`)
    } catch (e) {
      reject(e)
    }
  })
}

async function createDotnetVue(CURR_DIR, projectName, includeDeployWorkflow) {
  return new Promise(async (resolve, reject) => {
    try {
      let projPath = `${CURR_DIR}/${projectName}`
      fs.mkdirSync(projPath)
      process.chdir(projPath)
      if (includeDeployWorkflow) {
        addHerokuDeployWorkflow(projectName)
      }

      await createDotnetAuth(projPath, projectName)
      process.chdir('../')
      execSync(`npx create-project ${projectName}.client codeworks-templates/vue-starter`)

      fs.writeFileSync(`${projPath}/${projectName}.code-workspace`, generateWorkspace(projectName, true), "utf8")

      installClientDependencies(projectName)
      resolve(`[#] Open Project Workspace\n[#] cd into ${projectName}\n[#] type 'code .`)
    } catch (e) {
      console.groupEnd()
      reject(e)
    }
  })
}

function addHerokuDeployWorkflow(projectName) {
  fs.mkdirSync(`.github/workflows`, { recursive: true })
  fs.writeFileSync(`.github/workflows/deploy.yml`, `# Deploy Dotnet to Heroku.
name: Deploy to heroku.

# Run workflow on every push to master branch
on:
  push:
    branches: [deploy]

# Your workflows jobs.
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Check-out your repository.
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x

      - name: Set Env Vars
        uses: microsoft/variable-substitution@v1
        with:
          files: '${projectName}/appsettings.json'
        env:
          CONNECTION_STRING: \${{ secrets.CONNECTION_STRING }}
          AUTH0_DOMAIN: \${{ secrets.AUTH0_DOMAIN }}
          AUTH0_AUDIENCE: \${{ secrets.AUTH0_AUDIENCE }}

      # dotnet build and publish
      - name: dotnet publish
        run: |
          dotnet publish ./${projectName} -c Release
      - name: Build, Push and Release a Docker container to Heroku.
        uses: gonuit/heroku-docker-deploy@v1.3.3
        with:
          # The email address associated with your Heroku account.
          email: \${{ secrets.HEROKU_EMAIL }}
          # Heroku API key associated with provided user's email.
          # Api Key is available under your Heroku account settings.
          heroku_api_key: \${{ secrets.HEROKU_API_KEY }}
          # Name of the heroku application to which the build is to be sent.
          heroku_app_name: \${{ secrets.HEROKU_APP_NAME }}
          dockerfile_directory: ./${projectName}`)
}

function installClientDependencies(projectName) {
  process.chdir(`${projectName}.client`)
  npm_i()
  process.chdir(`../`)
}

function installServerDependencies() {
  console.groupCollapsed(colors.FgMagenta, "  [~] Installing Server Dependencies", colors.Reset)
  startSpinner()
  execSync('dotnet restore')
  stopSpinner()
  console.groupEnd()
}

exports.createDotnetVue = createDotnetVue
exports.createDotnetAuth = createDotnetAuth
