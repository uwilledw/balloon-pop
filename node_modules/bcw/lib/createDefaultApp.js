let fs = require("fs");
let { execSync } = require("child_process");
const { npm_i } = require("./npm_i");

const authApps = {
  auth: ["node-server-auth0"],
  server: ["node-server", "node-server-auth0"]
};

function createDefaultApp(CURR_DIR, projectChoice, projectName) {
  return new Promise((resolve, reject)=>{
    let hasAuth = false;
    let isServer = false;
    try {
      // @ts-ignore
      hasAuth = authApps.auth.includes(projectChoice);
      // @ts-ignore
      isServer = authApps.server.includes(projectChoice);

      let projPath = `${CURR_DIR}/${projectName}`;
      try {
        execSync(`npx create-project ${projectName} codeworks-templates/${projectChoice}`);
        process.chdir(projPath);
      } catch (e) {
        throw new Error("[ERROR] Invalid Template" + e.message);
      }

      if (isServer) {
        fs.writeFileSync(`${projPath}/.gitignore`, "node_modules \n.env", "utf8");
        let envContents = ["NODE_ENV=dev", "CONNECTION_STRING=", "PORT="];
        if (hasAuth) {
          envContents.push("AUTH_DOMAIN=", "AUTH_AUDIENCE=", "AUTH_CLIENT_ID=");
        }
        fs.writeFileSync(`${projPath}/.env`, envContents.join("\n"), "utf8");
        npm_i()
      }
      resolve(`[#] Open Project\n[#] cd into ${projectName}\n[#] type 'code .'`)
    } catch (e) {
      reject(e)
    }
  })
}

exports.createDefaultApp = createDefaultApp;
