#!/usr/bin/env node
var basePath = process.cwd();
var http = require("http");
var fs = require("fs");
var mime = require("mime");
var path = require("path");
const { colors } = require("./console-utils");
var port = 8080;

try {
  if (process.argv) {
    process.argv.find((a, i) => {
      if (a.includes("-p")) {
        port = Number(process.argv[i + 1]);
        return true;
      }
    });
  }
} catch (error) {
  console.error(error);
}

let server = http.createServer(function (req, res) {
  try {
    // @ts-ignore
    let cleaned = req.url.replace(/\/?(?:\?.*)?$/, "").replace(/^\//, "");
    var decoded = decodeURI(cleaned);
    var filename = path.join(process.cwd(), decoded);
    if (fs.statSync(filename).isDirectory()) filename += "/index.html";
    var exists = fs.existsSync(filename);

    if (!exists) {
      throw new Error('not found')
    }

    fs.readFile(filename, "binary", function (err, file) {
      if (err) {
        res.writeHead(500, { "Content-Type": "text/plain" });
        res.write(err + "\n");
        res.end();
        return;
      }

      // @ts-ignore
      res.writeHead(200, { "Content-Type": mime.getType(filename) });
      res.write(file, "binary");
      res.end();
    });
  } catch (e) {
    res.writeHead(404, { "Content-Type": "text/html" });
    res.write("<h1>404 Not Found</h1> <a href='/'>GO BACK</a>");
    res.end();
  }
});

function startServer() {
  server.listen(port, () => {
    console.log(
      `
${colors.FgGreen}---CODEWORKS DEV SERVER-------------------------------------------------------${colors.Reset}

Starting static file server
  ${colors.FgYellow}${basePath}${colors.Reset}
  Available on:  ${colors.FgCyan}http://localhost:${port}${colors.Reset}

  Quit: ${colors.FgMagenta}ctrl+c${colors.Reset}
`
    );
  });

  process.on('SIGINT', function () {
    console.log(colors.FgRed, '  [!] Server stopped.', colors.Reset);
    process.exit();
  });

  process.on('SIGTERM', function () {
    console.log(colors.FgRed, '  [!] Server stopped.', colors.Reset);
    process.exit();
  });

}

startServer();
